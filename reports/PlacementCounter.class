<?php
/*

 +------------------------------------------------------------------------------+
 | Mamook(R) Software                                                           |
 +------------------------------------------------------------------------------+
 | Copyright (c) 2000-2005 University of Victoria.  All rights reserved.        |
 +------------------------------------------------------------------------------+
 | THE LICENSED WORK IS PROVIDED UNDER THE TERMS OF THE ADAPTIVE PUBLIC LICENSE |
 | ("LICENSE") AS FIRST COMPLETED BY: The University of Victoria. ANY USE,      |
 | PUBLIC DISPLAY, PUBLIC PERFORMANCE, REPRODUCTION OR DISTRIBUTION OF, OR      |
 | PREPARATION OF DERIVATIVE WORKS BASED ON, THE LICENSED WORK CONSTITUTES      |
 | RECIPIENT'S ACCEPTANCE OF THIS LICENSE AND ITS TERMS, WHETHER OR NOT SUCH    |
 | RECIPIENT READS THE TERMS OF THE LICENSE. "LICENSED WORK" AND "RECIPIENT"    |
 | ARE DEFINED IN THE LICENSE. A COPY OF THE LICENSE IS LOCATED IN THE TEXT     |
 | FILE ENTITLED "LICENSE.TXT" ACCOMPANYING THE CONTENTS OF THIS FILE. IF A     |
 | COPY OF THE LICENSE DOES NOT ACCOMPANY THIS FILE, A COPY OF THE LICENSE MAY  |
 | ALSO BE OBTAINED AT THE FOLLOWING WEB SITE: http://www.mamook.net            |  
 |                                                                              |
 | Software distributed under the License is distributed on an "AS IS" basis,   |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for |
 | the specific language governing rights and limitations under the License.    | 
 +------------------------------------------------------------------------------+
 | Filename: PlacementCounter.class                                             |
 +------------------------------------------------------------------------------+
 | Description: This class is used in reports for counting history records that |
 |              use containers.                                                 |
 +------------------------------------------------------------------------------+

 This class has dependencies to 
 misc/functions.inc 
 misc/constants.inc
 misc/db.inc

*/

class PlacementCounter 
{
    var $discipline;    // an array of discipline container settings 

    // the constructor loads up all container based disciplines, and stores its settings into $discipline array 
    function PlacementCounter() 
    {
        $this->discipline = array();

        $sql = ("
            SELECT d.discipline_id, d.use_history_containers_hours, d.use_history_containers_term
            , d.history_containers_length_hours, d.history_containers_length_term
            FROM discipline d
            WHERE (d.use_history_containers_hours = '1' OR d.use_history_containers_term = '1')
            ");
        $result = $GLOBALS['dbh']->Execute($sql);
        while (list($discipline_id, $use_history_containers_hours, $use_history_containers_term, $hours, $months) = $result->FetchRow())
        {
            $this->discipline[$discipline_id]['use_history_containers_hours'] = $use_history_containers_hours;
            $this->discipline[$discipline_id]['use_history_containers_term'] = $use_history_containers_term;
            $this->discipline[$discipline_id]['hours'] = $hours;
            $this->discipline[$discipline_id]['months'] = $months;
        }
    }

    function countPlacement($discipline_id, $start_date, $end_date, $work_term_length, $work_term_hours_per_week) 
    {
        $increment = 0; 
        
        if ($this->discipline[$discipline_id]['use_history_containers_term']) 
        {
            assert($this->discipline[$discipline_id]['months'] != 0);
            // length of work term divided by the container's length
            $increment = $work_term_length / $this->discipline[$discipline_id]['months'];
            $increment = $this->roundQuarter($increment);
        }
        elseif ($this->discipline[$discipline_id]['use_history_containers_hours']) 
        {
            $num_days = count_days($start_date, $end_date);
            $hours_per_day = $work_term_hours_per_week / 7; 
            $total_hours = $num_days * $hours_per_day;

            assert($this->discipline[$discipline_id]['hours'] != 0);
            // total hours worked divided by number of hours in container
            $increment = $total_hours / $this->discipline[$discipline_id]['hours'];
            $increment = $this->roundQuarter($increment);
        }
        else
        {
            // otherwise, this record doesn't use containers, count it as a whole work term 
            $increment = 1;
        }

        return $increment;
    }

    // rounds a number to nearest quarter
    function roundQuarter($num) 
    {
        return round($num * 4) / 4;
    }
}

?>
