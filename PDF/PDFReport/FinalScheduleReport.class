<?php
/*

   +------------------------------------------------------------------------------+
   | Mamook[tm] Software                                                          |
   +------------------------------------------------------------------------------+
   | Copyright (c) 2000-2005 University of Victoria.  All rights reserved.        |
   +------------------------------------------------------------------------------+
   | THE LICENSED WORK IS PROVIDED UNDER THE TERMS OF THE ADAPTIVE PUBLIC LICENSE |
   | ("LICENSE") AS FIRST COMPLETED BY: The University of Victoria. ANY USE,      |
   | PUBLIC DISPLAY, PUBLIC PERFORMANCE, REPRODUCTION OR DISTRIBUTION OF, OR      |
   | PREPARATION OF DERIVATIVE WORKS BASED ON, THE LICENSED WORK CONSTITUTES      |
   | RECIPIENT'S ACCEPTANCE OF THIS LICENSE AND ITS TERMS, WHETHER OR NOT SUCH    |
   | RECIPIENT READS THE TERMS OF THE LICENSE. "LICENSED WORK" AND "RECIPIENT"    |
   | ARE DEFINED IN THE LICENSE. A COPY OF THE LICENSE IS LOCATED IN THE TEXT     |
   | FILE ENTITLED "LICENSE.TXT" ACCOMPANYING THE CONTENTS OF THIS FILE. IF A     |
   | COPY OF THE LICENSE DOES NOT ACCOMPANY THIS FILE, A COPY OF THE LICENSE MAY  |
   | ALSO BE OBTAINED AT THE FOLLOWING WEB SITE: http://www.mamook.net            |
   |                                                                              |
   | Software distributed under the License is distributed on an "AS IS" basis,   |
   | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for |
   | the specific language governing rights and limitations under the License.    |
   +------------------------------------------------------------------------------+
   | Filename: FinalScheduleReport.class                                          |
   +------------------------------------------------------------------------------+
   | Description: This file is used to help convert many of our HTML documents    |
   | into PDF files.                                                              |
   +------------------------------------------------------------------------------+

 */

define( "INTERVIEW", 1 );	
define( "INT_BREAK", 2 );	
define( "LUNCH", 3 );	
define( "NO_TIME", 4 );	

define( "FILE", "PDF/PDFReport/" . uniqid( "COOPX" ) . ".pdf" );	

/*** 	8.5 x 11 inch	***/
define( "WIDTH", 612 );
define( "HEIGHT", 792 );
define( "VMARGIN", 30 );
define( "HMARGIN", 50 );	
define( "RADIUS", 18 );

define( "TOP", 610 );
define ( "LHEIGHT", 20 );	// Line height


class FinalScheduleReport extends EditInterview
{
	//added by Emily on Feb 2, 2001 to prevent pdf_save in createnewpage from being called more
	//then once which creates an error
	var $page_count = 1;
	var $font_TB, $font_TR, $font_TI;

	function decrementY( $amount, $pdf ){
		global $y;

		$y -= $amount;
		if ($y < (LHIEGHT + VMARGIN) ) {
			pdf_end_page ( $pdf );
			$this->createNewPage( $pdf );
			$y = HEIGHT - VMARGIN-LHEIGHT;
		}
	}

	function print_string ($str_show, $num_points, $start_width, $pdf ){
		global $y;

		if (pdf_stringwidth( $pdf, $str_show ) < $num_points ) {
			pdf_show_xy	( $pdf, $str_show, $start_width, $y );
			$this->decrementY ( LHEIGHT, $pdf );
		}else{
			$words = split(" +", $str_show);

			$char_count = 0;
			$last_str = "";

			for ($i = 0; $i < count($words); $i++){
				$word = $words[$i];

				if (pdf_stringwidth( $pdf, $word ) > $num_points ){
					if ($last_str != ""){
						pdf_show_xy	($pdf, trim($last_str), $start_width, $y );
						$this->decrementY( LHEIGHT, $pdf );
					}
					$last_str = "";

					while (pdf_stringwidth( $pdf, $word) > $num_points) {
						$num_chars = intval ($num_points / pdf_stringwidth( $pdf, "W" ));
						while(pdf_stringwidth( $pdf, substr($word, 0, $num_chars)) < $num_points){
							if ($num_chars>strlen($word)){
								break;
							}
							$num_chars++;
						}

						pdf_show_xy	($pdf, trim(substr($word, 0, $num_chars)) . "-", $start_width, $y);
						$word = substr($word, $num_chars, strlen($word));
						$this->decrementY( LHEIGHT, $pdf );
					}
					$char_count = 0;

				}
				$char_count += pdf_stringwidth( $pdf, $word . " ");
				if ($char_count >= $num_points ){
					pdf_show_xy	($pdf, trim($last_str), $start_width, $y );
					$this->decrementY(LHEIGHT, $pdf );
					$char_count = pdf_stringwidth( $pdf, $word );
					$last_str = $word;
				}else{
					$last_str .= " " . $word;
				}
			}
			if ($last_str != ""){
				pdf_show_xy ($pdf, trim($last_str), $start_width, $y );
				$this->decrementY( LHEIGHT, $pdf );
			}
		}
	}
		
	function createNewPage( $pdf )
	{
		pdf_begin_page($pdf, WIDTH, HEIGHT);
		pdf_set_value				( $pdf, "textrendering", 0);
		if ($this->font_TR) {
			pdf_setfont($pdf, $this->font_TR, 13);
		}

		pdf_setlinewidth			( $pdf, 2 );
		pdf_set_value				( $pdf, "charspacing", 1.8);
		pdf_setrgbcolor_stroke		( $pdf, 0.4, 0.6, 0.78 );
		if ($this->page_count == 1){
			pdf_save	( $pdf );
		}
		$this->page_count++;
	}	
	
	function FinalScheduleReport( $job_id, $department )
	{
				
		$this->loadValues( $job_id );

		
		$pdf = pdf_new();
		pdf_open_file( $pdf, FILE );
		
		$this->font_TB = pdf_findfont($pdf, "Times-Bold", "host", 0);
		$this->font_TR = pdf_findfont($pdf, "Times-Roman", "host", 0);
		$this->font_TI = pdf_findfont($pdf, "Times-Italic", "host", 0);

		/***	set general info 	***/	
		pdf_set_info($pdf, "Author", "Mamook");
		pdf_set_info($pdf, "Title", $this->job_code);
		pdf_set_info($pdf, "Creator", ORGANIZATION);
	
		/***	open a new page and set environment vars	***/
		$this->createNewPage( $pdf );

		/***	generate the header    ***/
		$this->creatHeader( $pdf, $department );	

		/***	init the top coordinate of content		***/
		$y = TOP;

		/***  	display employer name, job code, date(s), location(s), interviewer(s) 	***/	
		$this->createGeneralInfo($pdf);	
		if( $this->presentation == 1 )
			$this->createPresentation($pdf);
					
		/***	display daily schedule	  ***/		
	    	$this->createSchedule( $pdf );
		
		$this->createBottomMessage( $pdf, $department );
		pdf_end_page($pdf);
		pdf_close($pdf);

		/***	send the generated pdf to browser		***/
		$this->sendPDF();		
	}
	
	function createSchedule( $pdf )
	{
		global $y;	//	current y-coordinate
	
		$this->decrementY( LHEIGHT, $pdf );
		$multiple_rooms = 0;	
		if ($this->location_names[0] == "Many"){
			$multiple_rooms=1;
		}

		for( $i = 0; $i < count( $this->int_dates ); $i++ )
		{
			//added by emily feb 12 to display separate schedules for each interviewer
			
			for ( $j = 0; $j < count( $this->interviewer_ids ); $j++)
			{

			
				$result = $GLOBALS['dbh']->Execute("SELECT distinct i.time_id, i.student_number, i.int_time, i.int_type, a.interviewer_name 
						FROM interview_time as i, interview_interviewer as a
						WHERE i.job_id='$this->job_id' AND 
							i.int_date='" . $this->int_dates[$i] . "' AND 
							a.interviewer_id = i.interviewer_id AND
							a.interviewer_id = '" . $this->interviewer_ids[$j] . "'
						ORDER by i.int_time, a.interviewer_id");
								
				/***	check there is enough space to fit a daily schedule in, if not, display the schedule in next page.		***/			
				if ( $y < LHEIGHT * (  $result->RecordCount() + 3 ) )
				{
					pdf_end_page( $pdf );
					
					$this->createNewPage( $pdf );
					
					$y = HEIGHT-VMARGIN-LHEIGHT;
				}

				//print the header on the correct page
				//Added by emily Feb 7
				if ($i == 0 && $j == 0){
					pdf_set_value		( $pdf, "charspacing", 4);
					if ($this->font_TB) {
						pdf_setfont	($pdf, $this->font_TB, 14);
					}
					pdf_setrgbcolor_fill    ( $pdf, 0.2, 0.2, 0.4 );
					pdf_show_xy             ( $pdf, "Interview Schedule", HMARGIN, $y );
					pdf_setrgbcolor_fill    ( $pdf, 0, 0, 0 );
					pdf_set_value		( $pdf, "charspacing", 1.8);
					$this->decrementY( LHEIGHT, $pdf );
				}
			
				if( count( $this->int_dates ) > 1 && $j == 0 )
				{

					if ($this->font_TB) {
						pdf_setfont	($pdf, $this->font_TB, 13);
					}
					pdf_setlinewidth		( $pdf, 2 );
				
					$date = formatLongDate		( $this->int_dates[$i] );
					$length = pdf_stringwidth	( $pdf, $date );

			   		pdf_moveto			( $pdf, HMARGIN, $y + 5 );
					pdf_lineto			( $pdf, ( WIDTH - $length )/2 - 25  , $y + 5 );
				   	pdf_moveto			( $pdf, ( WIDTH + $length )/2 + 25 , $y + 5 );
					pdf_lineto			( $pdf, WIDTH - HMARGIN  , $y + 5 );
   					pdf_stroke			( $pdf );
					pdf_show_xy			( $pdf, $date, ( WIDTH - $length )/2  , $y );
					$this->decrementY( LHEIGHT, $pdf );

				}
				

				if ($this->font_TB) {
					pdf_setfont	($pdf, $this->font_TB, 13);
				}
				pdf_show_xy		( $pdf, "Ranking", 502, $y );
				if ($this->font_TR) {
					pdf_setfont	($pdf, $this->font_TR, 13);
				}

				$this->decrementY( LHEIGHT, $pdf );
				$show_interviewer = 1;	
				while($row = $result->FetchRow())
				{
			  		if( count( $this->interviewer_ids ) > 1 && $show_interviewer){
						pdf_set_parameter	( $pdf, "underline", "true" );
						pdf_show_xy		( $pdf, $row["interviewer_name"] . ":", HMARGIN, $y );
						pdf_set_parameter	( $pdf, "underline", "false" );
						$y = $y - LHEIGHT;
						$show_interviewer = 0;
					}
					
					if( $row['int_type'] == INTERVIEW || $row['int_type'] == NO_TIME )
			  		{
					  	$row2 = $GLOBALS['dbh']->GetRow("SELECT student_number,CONCAT(first_name, ' ', last_name) AS student_name FROM student WHERE student_number='" . $row['student_number'] . "'");
                                                
						global $selection;

						if ($selection == "final_student")
						{
							$content = "";
							if (strlen ($row2['student_number']))
								$content = "xx".substr($row2['student_number'], 2);
						}
						else
			   				$content = $row2['student_name'];
			   		
		 				if ((isPhone($this->interview_medium) || isOnCampus($this->interview_place)) && $selection != "final_student"){
							$result3 = $GLOBALS['dbh']->Execute("SELECT phone FROM interview_phone WHERE time_id='" . $row['time_id'] . "'");
		 					if( ($row3 = $result3->FetchRow()) )
		 					{
								$result3b = $GLOBALS['dbh']->Execute("SELECT CONCAT(b.building_code, ' ', r.room_number)
											FROM building as b, room as r, interview_time as t
											WHERE b.building_id = r.building_id AND
												r.room_id = t.int_room_id AND
												t.time_id = '" . $row['time_id'] . "'");
							
								$content = $content . " (" . $row3['phone'] . ")";
		 					}elseif ($multiple_rooms==1 && $content != ""){
								$result3b = $GLOBALS['dbh']->Execute("SELECT CONCAT(b.building_code, ' ', r.room_number) as room
											FROM building as b, room as r, interview_time as t
											WHERE b.building_id = r.building_id AND
												r.room_id = t.int_room_id AND
												t.time_id = '" . $row['time_id'] . "'");
								$row3b = $result3b->FetchRow();
								if ($row3b["room"] != ""){
									$content .= " (" . $row3b["room"] . ")";
								}else{
									$content .= " ( T . B . A )";
								}
							}
						}
		 				pdf_setrgbcolor_fill		( $pdf, 0, 0, 0 );
		 			
					}
					elseif( $row['int_type'] == INT_BREAK )
					{
		 				pdf_setrgbcolor_fill		( $pdf, 1, 0, 0 );
				   		$content = "BREAK";
					}
					elseif( $row['int_type'] == LUNCH )
					{
		 				pdf_setrgbcolor_fill		( $pdf, 1, 0, 0 );
				   		$content = "LUNCH";
					}
					pdf_show_xy					( $pdf, formatTime( $row['int_time'], false ), HMARGIN, $y );
					$this->print_string ($content, 500-180, 180, $pdf);
	
				  	if( $row['int_type'] == INTERVIEW || $row['int_type'] == NO_TIME )
					{				
						pdf_setlinewidth			( $pdf, 1.2 );
   					   	pdf_moveto					( $pdf, 500, $y + LHEIGHT );
						pdf_lineto					( $pdf, WIDTH-HMARGIN  , $y+LHEIGHT );
   						pdf_stroke					( $pdf );
   					}
	
				
				}
				pdf_setrgbcolor_fill		( $pdf, 0, 0, 0 );
				$this->decrementY(LHEIGHT, $pdf);
	
			}
		}
	}

	
	
	function creatHeader( $pdf, $department )
	{
		pdf_setlinewidth			( $pdf, 5 );
	   	
	   	/*** 	draw the box arround the header	***/
	   	pdf_moveto					( $pdf, HMARGIN+RADIUS, HEIGHT-VMARGIN );
		pdf_lineto					( $pdf, WIDTH-HMARGIN-RADIUS, HEIGHT-VMARGIN );
	
		pdf_moveto					( $pdf, HMARGIN+RADIUS, 660-RADIUS );
		pdf_lineto					( $pdf, WIDTH-HMARGIN-RADIUS, 660-RADIUS );
   	
	   	pdf_moveto					( $pdf, HMARGIN, 660 );
		pdf_lineto					( $pdf, HMARGIN, HEIGHT-VMARGIN-RADIUS );

	   	pdf_moveto					( $pdf, WIDTH-HMARGIN, 660 );
		pdf_lineto					( $pdf, WIDTH-HMARGIN, HEIGHT-VMARGIN-RADIUS );

		pdf_arc						( $pdf, WIDTH-HMARGIN-RADIUS, HEIGHT-VMARGIN-RADIUS, RADIUS, 0, 90 );
		pdf_arc						( $pdf, HMARGIN+RADIUS, HEIGHT-VMARGIN-RADIUS, RADIUS, 90, 180 );
		pdf_arc						( $pdf, HMARGIN+RADIUS, 660, RADIUS, 180, 270 );
		pdf_arc						( $pdf, WIDTH-HMARGIN-RADIUS, 660, RADIUS, 270, 360 );
		pdf_stroke					( $pdf );
	
		/***	display header text 	***/	
		$font_TB = pdf_findfont($pdf, "Times-Bold", "host", 0);
		if ($this->font_TB) {
			pdf_setfont	($pdf, $this->font_TB, 30);
		}
		pdf_set_value		( $pdf, "charspacing", 5);
	
		pdf_show_boxed($pdf, "Final Interview Schedule", HMARGIN+RADIUS, 700, WIDTH - 2*( HMARGIN + RADIUS ), HEIGHT-680-VMARGIN-RADIUS, "center");

		if ($this->font_TR) {
			pdf_setfont	($pdf, $this->font_TR, 12);
		}
		pdf_set_value		( $pdf, "charspacing", 2.8);
		pdf_set_value		( $pdf, "leading", 20);
		
		$result = $GLOBALS['dbh']->Execute( " SELECT department_name, department_faculty, phone_assistance from department where department_id='$department' " );
		$row =  $result->FetchRow();
		pdf_continue_text		( $pdf, $row['department_name'] . " Co-op");
		pdf_set_value			( $pdf, "leading", 15);
		pdf_continue_text		( $pdf, $row["department_faculty"]);
	
		pdf_set_value			( $pdf, "leading", 15);
		pdf_continue_text		( $pdf, ORGANIZATION );
    	
		pdf_set_value			( $pdf, "charspacing", 1.2);
		pdf_set_value			( $pdf, "leading", 15);
		
		if ($this->font_TI) {
			pdf_setfont		($pdf, $this->font_TI, 11);
		}
    		$width = pdf_stringwidth	( $pdf, "Note to Employers:");
    		pdf_show_xy			( $pdf, "Note to Employers:", HMARGIN+RADIUS+20, 668);
		if ($this->font_TR) {
			pdf_setfont		($pdf, $this->font_TR, 10);
		}
		pdf_set_value			( $pdf, "charspacing", 0.2);
		pdf_show_xy			( $pdf, "If you require assistance or have questions while conducting interviews,", HMARGIN+RADIUS+$width+30, 668);
    		pdf_show_xy			( $pdf, "please dial " . $row["phone_assistance"] . " on a campus phone.", HMARGIN+RADIUS+$width+30, 653);
        	pdf_restore			( $pdf );

	}

	function createGeneralInfo( $pdf )
	{
		global $y;	//	current y-coordinate
		
		$y = TOP;

		pdf_show_xy			( $pdf, "JOB CODE:", HMARGIN, TOP );
		pdf_show_xy			( $pdf, $this->job_code, 220, TOP );
		$this->decrementY(LHEIGHT, $pdf);

		pdf_show_xy			( $pdf, "EMPLOYER NAME:", HMARGIN, $y );
		$this->print_string($this->company_name, WIDTH-HMARGIN-220, 220, $pdf);
		
	
		for( $i=0; $i<count( $this->interviewers ); $i++ )
		{
			if( $i == 0 ) 	
			{
				$interviewers = $this->interviewers[$i];
				$locations = $this->location_names[$i];
			}
			else		
			{
				$interviewers = $interviewers . ", ". $this->interviewers[$i];
			
				/***	Ensure no duplicate location appear		***/
				if( !eregi( "^(.*, )?(" . $this->location_names[$i] . ")(, .*)?$", $locations ) )
				{
					$locations = $locations . ", " . $this->location_names[$i];
				}
			}
		}

		pdf_show_xy			( $pdf, "DATE(S):", HMARGIN, $y );
	
		for( $i = 0; $i < count( $this->int_dates ); $i++ )
		{
			if( $i % 2 == 0 )
			{
				if( $i == (count( $this->int_dates )-1) )
				{
					pdf_show_xy( $pdf, formatStandardDate($this->int_dates[$i], false), 220, $y );
					$this->decrementY(LHEIGHT, $pdf);
				}
				else
					pdf_show_xy( $pdf, formatStandardDate($this->int_dates[$i], false), 220, $y );
			}				
			else
			{				
				pdf_show_xy	( $pdf, formatStandardDate($this->int_dates[$i], false), 380, $y );
				$this->decrementY(LHEIGHT, $pdf);
			}
		}

		pdf_show_xy		( $pdf, "INTERVIEWER(S):", HMARGIN, $y );
		$this->print_string($interviewers, WIDTH-HMARGIN-220, 220, $pdf);
						
		pdf_show_xy		( $pdf, "LOCATION(S):", HMARGIN, $y );
	

		if( isPhone($this->interview_medium) || isOnCampus($this->interview_place))
		{
			$this->print_string($locations, WIDTH-HMARGIN-220, 220, $pdf);
		}
		else
		{   //off campus & not phone interview
			$this->print_string($this->address1 , WIDTH-HMARGIN-220, 220, $pdf);
			if( $this->address2 != '' )
			{
				$this->print_string($this->address2, WIDTH-HMARGIN-220, 220, $pdf);
			}
			$this->print_string($this->city . ", " . $this->province, WIDTH-HMARGIN-220, 220, $pdf);
			
			if( !eregi( "^(ca|can|canada)$", $this->country ) )
			{		
				$this->print_string($this->country, WIDTH-HMARGIN-220, 220, $pdf);
			}			
						
		}
		$this->decrementY(LHEIGHT, $pdf);
		/* Added by Emily on Feb 5 to print note if phone interview*/
		if (isPhone($this->interview_medium)){
			$this->decrementY(LHEIGHT, $pdf);
			pdf_set_parameter( $pdf, "underline", "true");
			pdf_show_xy( $pdf, "THIS IS A TELEPHONE INTERVIEW", HMARGIN, $y);
			pdf_set_parameter( $pdf, "underline", "false");
			$this->decrementY(LHEIGHT, $pdf);
		}
		/* End of Add*/
	}
	
	function sendPDF()
	{	
		header( "Content-type: application/pdf");
		header( "Content-Disposition: attachment; filename=Report.pdf" );
		header( "Content-Description: PHP4 Generated Data" );

		/*** open the pdf file and send to browser ***/
		$fp = fopen( FILE, "r" );
	
		fpassthru($fp);
		unlink( FILE );
	}

	/***	display message for submitting rankings		***/
	function createBottomMessage( $pdf, $department )
	{
		global $y;	//	current y-coordinate
		
		if ($this->font_TR) {
			pdf_setfont		($pdf, $this->font_TR, 12);
		}
		pdf_set_value			( $pdf, "leading", 16);
		
		if ( $y < LHEIGHT * 3 + VMARGIN )
		{
			pdf_end_page			( $pdf );
			$this->createNewPage( $pdf );
			$y = HEIGHT-VMARGIN-LHEIGHT;
		}

		$sql = "SELECT DISTINCT d.department_name, c.first_name, c.last_name, c.phone, c.fax, c.email
			FROM department as d, contact as c
			WHERE c.contact_id=d.placement_contact_id AND d.department_id='".$department."'";
		$result = $GLOBALS['dbh']->Execute($sql);
		$row=$result->FetchRow();

		pdf_set_value			( $pdf, "charspacing", 0.2);

		$this->decrementY(LHEIGHT, $pdf);
		pdf_show_xy	( $pdf, "Please submit your rankings to ".$row['first_name']." ".$row['last_name']." in ".$row['department_name']." Co-op", HMARGIN, $y );

		$this->decrementY(LHEIGHT, $pdf);
		pdf_show_xy ( $pdf, ORGANIZATION.", Tel: ".$row['phone'].", Fax: ".$row['fax'], HMARGIN, $y );
		
		$this->decrementY(LHEIGHT, $pdf);
		pdf_show_xy ( $pdf, "or e-mail to: ".$row['email'], HMARGIN, $y );
	}

	function createPresentation( $pdf )
	{
		global $y;
		$this->decrementY(LHEIGHT, $pdf);
		if ($this->font_TR) {
			pdf_setfont		($pdf, $this->font_TR, 10);
		}
		$this->pres_notes = trim( strip_tags($this->pres_notes) );
		if ($this->pres_notes)
		{
			$num_chars = intval( ( WIDTH - 140 - HMARGIN+20) / pdf_stringwidth( $pdf, "W" ) );
			$note_rows = ceil( strlen($this->pres_notes) / $num_chars );
		}

		/**
		* calculate if there is enough space to fit presentation info into current page
		* if not, create new page.
		*/
		if ($y < LHEIGTH * ($note_rows + 5))
		{
			pdf_end_page ($pdf);
			$this->createNewPage( $pdf );
			$y = HEIGHT-VMARGIN-LHEIGHT;
		}

		pdf_set_value		( $pdf, "charspacing", 4);
		if ($this->font_TB) {
			pdf_setfont	($pdf, $this->font_TB, 14);
		}
		pdf_setrgbcolor_fill	( $pdf, 0.2, 0.2, 0.4 );
		pdf_show_xy		( $pdf, "Presentation", HMARGIN, $y );
		pdf_setrgbcolor_fill	( $pdf, 0, 0, 0 );
		pdf_set_value		( $pdf, "charspacing", 1.8);
		$this->decrementY(LHEIGHT, $pdf);

		if ($this->font_TB) {
			pdf_setfont	($pdf, $this->font_TB, 13);
		}
		pdf_show_xy		( $pdf, "Date:", HMARGIN, $y );
		pdf_show_xy		( $pdf, formatLongDate( $this->pres_date ), 140, $y);
		$this->decrementY(LHEIGHT, $pdf);

		if ($this->font_TB) {
			pdf_setfont	($pdf, $this->font_TB, 13);
		}
		pdf_show_xy		( $pdf, "Time:", HMARGIN, $y );
		if ($this->font_TR) {
			pdf_setfont	($pdf, $this->font_TR, 13);
		}
		pdf_show_xy		( $pdf, formatTime( $this->pres_time, false ) . "  -  " . formatTime( add_times($this->pres_time, $this->pres_len), false), 140, $y);
		$this->decrementY(LHEIGHT, $pdf);
		
		if ($this->font_TB) {
			pdf_setfont	($pdf, $this->font_TB, 13);
		}
		pdf_show_xy		( $pdf, "Location:", HMARGIN, $y );
		if ($this->font_TR) {
			pdf_setfont	($pdf, $this->font_TR, 13);
		}
		$this->print_string($this->pres_loc, WIDTH-HMARGIN-140, 140, $pdf);
		
		
		if ( $this->pres_notes )
		{
			if ($this->font_TB) {
				pdf_setfont	($pdf, $this->font_TB, 13);
			}
			pdf_show_xy	( $pdf, "Notes: ", HMARGIN, $y );
			if ($this->font_TR) {
				pdf_setfont	($pdf, $this->font_TR, 13);
			}
			$this->print_string($this->pres_notes, WIDTH-HMARGIN-140, 140, $pdf);	
		}
		
	}
			
}

?>
